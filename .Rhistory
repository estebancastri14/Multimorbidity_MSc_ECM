library(gtsummary); library(dplyr); library(tidyr)
df_modelos <- datos_2[, c("edad", "sexo", "adherente_total", "Clase_Latente", "grupo_enfermedades", "grupo_iis", "controlado",
"fragilidad", "marcha_alterada", "apoyo_alterado")]
# Cargar librerías necesarias
library(dplyr)
library(summarytools)
library(dplyr)
library(table1)
library(rcompanion)
# Cargar el archivo
library(readr)
df_multimorbilidad <- read_csv("D:/esteb/Documents/Posgrado/Analisis/df_enfermedades_r.csv")
df_multimorbilidad_2 <- read_csv("D:/esteb/Documents/Posgrado/Analisis/df_completo.csv")
View(df_multimorbilidad)
datos <- df_multimorbilidad[,2:21]
datos_2 <- df_multimorbilidad_2[,2:79]
datos$grupo_poco_prevalente <- ifelse(
datos$artritis_reumatoide == 1 | datos$les == 1 |
datos$asma == 1 | datos$saos == 1 | datos$eap == 1 | datos$osteoporosis == 1 |
datos$gota == 1 | datos$hipertir == 1,
1, 0
)
# Convertir 0 → 1 y 1 → 2, y transformar a factor
datos[] <- lapply(datos, function(x) {
x <- ifelse(x == 0, 1, 2)  # cambio de codificación
factor(x, levels = c(1, 2))  # asegurar que es factor con niveles correctos
})
# Cargar librerías necesarias
library(data.table)
library(poLCA)  # Para análisis de clases latentes
library(ggplot2)
f<-with(datos, cbind(diabetes,hta,erc,epoc,scc,ecv,dislip,icc,obesidad,
fibri_auricular,osteoartritis, hipotir, grupo_poco_prevalente)~1)
k=10
for(i in 1:k){
assign(paste("lc",i,sep=""),
poLCA(f, datos, nclass=i, maxiter=3000,
tol=1e-5, na.rm=FALSE,
nrep=100, verbose=TRUE, calc.se=TRUE))
}
tab.modfit <- data.frame()
calcular_entropia <- function(modelo) {
probs <- modelo$posterior  # Matriz N x K con probabilidades de pertenencia
N <- nrow(probs)
K <- ncol(probs)
log_probs <- log(probs)
log_probs[is.infinite(log_probs)] <- 0  # evitar log(0)
suma <- -sum(probs * log_probs)
entropia <- 1 - (suma / (N * log(K)))
return(entropia)
}
for (i in 1:k) {
modelo <- get(paste("lc", i, sep = ""))
entropia <- calcular_entropia(modelo)
fila <- data.frame(
Nclass = i,
logLik = modelo$llik,
npar = modelo$npar,
AIC = modelo$aic,
BIC = modelo$bic,
Gsq = modelo$Gsq,
chi2 = modelo$Chisq,
df = modelo$resid.df,
Entropia = round(entropia, 4)
)
tab.modfit <- rbind(tab.modfit, fila)
}
# Ver los resultados
print(tab.modfit)
lca_select <- function(f,datos,nb_var,k,nbr_repet)
# f is the selected variables
# dat is the data
# nb_var is the number of selected variables
# k is the number of latent class generated
# nbr_repet is the number of repetition to
# reach the convergence of EM algorithm
{
N=length(t(datos[,1]))
tab.modfit<-data.frame(matrix(rep(999,12),nrow=1))
names(tab.modfit)<-c("Df","Gsq","Llik","AIC",
"mAIC","AICc","HT",
"cAIC","AICc","BIC","aBIC","HQ")
for(i in 2:k){
assign(paste("lc",i,sep=""),
poLCA(f, datos, nclass=i, maxiter=3000,
tol=1e-5, na.rm=FALSE,
nrep=nbr_repet, verbose=TRUE, calc.se=TRUE))
tab.modfit<-rbind(tab.modfit, c(
get(paste("lc",i,sep=""))$resid.df, #df
get(paste("lc",i,sep=""))$Gsq, #gsq
get(paste("lc",i,sep=""))$llik, #llik
-2*get(paste("lc",i,sep=""))$llik+
2*get(paste("lc",i,sep=""))$npar, #AIC
-2*get(paste("lc",i,sep=""))$llik+
3*get(paste("lc",i,sep=""))$npar, #AIC3
-2*get(paste("lc",i,sep=""))$llik+
2*get(paste("lc",i,sep=""))$npar+
(2*get(paste("lc",i,sep=""))$npar*get(paste("lc",
i,sep=""))$npar+1)/(N-get(
paste("lc",i,sep=""))$npar-1), #AICC
-2*get(paste("lc",i,sep=""))$llik+
2*get(paste("lc",i,sep=""))$npar+
(2*(get(paste("lc",i,sep=""))$npar+1)*(get(paste("lc",
i,sep=""))$npar+2))/(N-get(
paste("lc",i,sep=""))$npar-2), #HT
-2*get(paste("lc",i,sep=""))$llik+get(
paste("lc",i,sep=""))$npar*(log(N)+1), #CAIC
-2*get(paste("lc",i,sep=""))$llik+
2*get(paste("lc",i,sep=""))$npar+
(2*get(paste("lc",i,sep=""))$npar*get(paste("lc",
i,sep=""))$npar+1)/(N-get(paste("lc",i,sep=""))$
npar-1)+
N*log(N/(N-get(paste("lc",i,sep=""))$npar-1)), #CAIU
-2*get(paste("lc",i,sep=""))$llik+
get(paste("lc",i,sep=""))$npar*log(N), #BIC
-2*get(paste("lc",i,sep=""))$llik+
get(paste("lc",i,sep=""))$npar*log((N+2)/24), #ABIC
-2*get(paste("lc",i,sep=""))$llik+
2*get(paste("lc",i,sep=""))$npar*log(log(N)) #HQ
))
}
tab.modfit<-round(tab.modfit[-1,],2)
tab.modfit$Nclass<-2:k
print(tab.modfit)
plot(tab.modfit$AIC,type="l",lty=2,lwd=1,
xaxt="n",
ylim=c(min(tab.modfit$AIC,tab.modfit$aBIC)-
100,round(max(tab.modfit$BIC,tab.modfit$aBIC))+100),
col="black",
xlab="Number of classes",ylab="Information criteria",
main="Comparison of information criteria to choose the
number of classes")
axis(1,at=1:length(tab.modfit$Nclass),
labels=tab.modfit$Nclass)
lines(tab.modfit$AIC,col="black",type="l",lty=2,lwd=1)
lines(tab.modfit$BIC,col="red",type="l",lty=2,lwd=1)
lines(tab.modfit$aBIC,col="green",type="l",lty=2,
lwd=1)
lines(tab.modfit$cAIC,col="orange",type="l",lty=2,
lwd=1)
lines(tab.modfit$HQ,col="blue",type="l",lty=2,lwd=1)
#lines(dd$caiu,col="purple",type="l",lty=7,lwd=2)
#lines(dd$bica,col="grey",type="l",lty=8,lwd=2)
#lines(dd$hq,col="pink",type="l",lty=9,lwd=2)
legend("topright",legend=c("AIC","BIC","aBIC","cAIC",
"HT"),
pch=21,col=c("black","red","green","orange","blue"),
ncol=5,bty="n",cex=0.8,lty=1:9,
text.col=c("black","red","green","orange","blue"),
inset=0.01)
}
lca_select(with(datos, cbind(diabetes,hta,erc,epoc,scc,ecv,dislip,icc,obesidad,
fibri_auricular,osteoartritis, hipotir, grupo_poco_prevalente)~1),
datos, k=10, nbr_repet=100)
lc3$predclass
datos$Clase_Latente <- lc3$predclass
datos_2$Clase_Latente <- lc3$predclass
datos$Clase_Latente <- as.numeric(datos$Clase_Latente)
datos$Clase_Latente <- as.factor(datos$Clase_Latente)
# Lista de variables a transformar
vars <- c("diabetes", "hta", "erc", "epoc", "scc", "ecv", "dislip", "icc", "obesidad", "osteoporosis", "fibri_auricular", "hipotir", "hipertir", "osteoartritis", "artritis_reumatoide", "les", "asma", "eap", "saos", "gota")
# Aplicar transformación
datos <- datos %>%
mutate(across(all_of(vars), ~ factor(.x, labels = c("No", "Si"))))
table1(~ factor(diabetes) + factor(hta) + factor(erc) + factor(epoc) + factor(scc) + factor(ecv) + factor(dislip) + factor(icc) + factor(obesidad) + factor(osteoporosis) + factor(fibri_auricular) + factor(hipotir) + factor(hipertir) + factor(osteoartritis) + factor(artritis_reumatoide) + factor(les) + factor(asma) + factor(eap) + factor(saos) + factor(gota) | Clase_Latente, data=datos)
# Identificar el rango de columnas desde "diabetes" hasta "gota"
col_inicio_2 <- which(names(datos_2) == "diabetes")
col_fin_2 <- which(names(datos_2) == "gota")
# Calcular el número de enfermedades por paciente
datos_2$Numero_Enfermedades <- rowSums(datos_2[, col_inicio_2:col_fin_2, with=FALSE])
datos_2 <- datos_2 %>%
mutate(grupo_enfermedades = case_when(
Numero_Enfermedades <= 1 ~ "0-1 enfermedades",
Numero_Enfermedades >= 2 ~ "2 o más enfermedades",
TRUE                     ~ NA_character_
))
# Convertir a factor
datos_2$grupo_enfermedades <- factor(datos_2$grupo_enfermedades,
levels = c("0-1 enfermedades", "2 o más enfermedades"))
table(datos_2$grupo_enfermedades)
datos_2 <- datos_2 %>%
mutate(grupo_iis = case_when(
puntaje_iis == 0              ~ "No enfermo",
puntaje_iis >= 1 & puntaje_iis <= 2 ~ "Levemente enfermo",
puntaje_iis >= 3 & puntaje_iis <= 5 ~ "Moderadamente enfermo",
puntaje_iis >= 6              ~ "Gravemente enfermo",
TRUE                          ~ NA_character_  # Para valores faltantes o no válidos
))
# Convertir a variable tipo factor con orden
datos_2$grupo_iis <- factor(datos_2$grupo_iis,
levels = c("No enfermo", "Levemente enfermo",
"Moderadamente enfermo", "Gravemente enfermo"))
table(datos_2$grupo_iis)
# Identificar columnas
columnas_enfermedades <- which(names(datos_2) %in% c("diabetes","hta","erc","epoc","scc","ecv","dislip","icc","obesidad","osteoporosis",
"fibri_auricular","hipotir","hipertir","osteoartritis","artritis_reumatoide","les","asma",
"eap","saos","gota"))
columnas_ctrl <- which(names(datos_2) %in% c("ctrl_diabetes","ctrl_hta","ctrl_erc","ctrl_epoc","ctrl_scc","ctrl_ecv","ctrl_dislip","ctrl_icc","ctrl_obesidad","ctrl_osteo","ctrl_fa","ctrl_hipotir","ctrl_hipertir","ctrl_osteoartritis","ctrl_artritis_reuma","ctrl_les","ctrl_asma","ctrl_eap","ctrl_saos","ctrl_gota"))
# Crear la variable dependiente
datos_2 <- datos_2 %>%
rowwise() %>%
mutate(
controlado = ifelse(
all(across(
all_of(names(datos_2)[columnas_ctrl])[across(all_of(names(datos_2)[columnas_enfermedades])) == 1],
~ .x == 1
)),
1,
0
)
) %>%
ungroup()
table(datos_2$controlado)
# Crear nuevas variables categorizadas
datos_2 <- datos_2 %>%
mutate(
fragilidad = ifelse(ind_gro_final >= 5, 1, ifelse(ind_gro_final <= 4, 0, NA)),
marcha_alterada = ifelse(marcha_final <= 0.60, 1, ifelse(marcha_final >= 0.61, 0, NA)),
apoyo_alterado = ifelse(apoyo_final <= 10, 1, ifelse(apoyo_final >= 11, 0, NA))
)
table(datos_2$marcha_alterada)
table(datos_2$fragilidad)
table(datos_2$apoyo_alterado)
# Identificar columnas
columnas_enfermedades <- which(names(datos_2) %in% c(
"diabetes", "hta", "erc", "epoc", "scc", "ecv", "dislip", "icc", "obesidad", "osteoporosis",
"fibri_auricular", "hipotir", "hipertir", "osteoartritis", "artritis_reumatoide", "les", "asma",
"eap", "saos", "gota"))
columnas_adh <- which(names(datos_2) %in% c(
"adh_diabetes", "adh_hta", "adh_erc", "adh_epoc", "adh_scc", "adh_ecv", "adh_dislip", "adh_icc", "adh_obesidad", "adh_osteo",
"adh_fa", "adh_hipotir", "adh_hipertir", "adh_osteoartritis", "adh_artritis_reuma", "adh_les", "adh_asma", "adh_eap", "adh_saos", "adh_gota"))
# Crear variable de adherencia total
datos_2 <- datos_2 %>%
rowwise() %>%
mutate(
adherente_total = ifelse(
all(across(
.cols = all_of(names(datos_2)[columnas_adh])[across(all_of(names(datos_2)[columnas_enfermedades])) == 1],
.fns = ~ .x == 1
)),
1,
0
)
) %>%
ungroup()
datos_2$adherente_total <- as.factor(datos_2$adherente_total)
datos_2$adherente_total <- factor(datos_2$adherente_total, labels = c("No", "Si"))
table(datos_2$adherente_total)
table(datos_2$grupo_iis, datos_2$controlado)
table(datos_2$grupo_enfermedades, datos_2$controlado)
table(datos_2$Clase_Latente, datos_2$controlado)
library(gtsummary); library(dplyr); library(tidyr)
df_modelos <- datos_2[, c("edad", "sexo", "adherente_total", "Clase_Latente", "grupo_enfermedades", "grupo_iis", "controlado",
"fragilidad", "marcha_alterada", "apoyo_alterado")]
df_modelos$sexo <- as.factor(df_modelos$sexo)
df_modelos$sexo <- factor(df_modelos$sexo, labels = c("Hombre", "Mujer"))
#Univariados control
# Perfil
modelo_per <- glm(controlado ~ Clase_Latente, data = df_modelos, family = binomial)
tbl_per <- tbl_regression(modelo_per, exponentiate = TRUE)
tbl_per
# Conteo
modelo_cont <- glm(controlado ~ grupo_enfermedades, data = df_modelos, family = binomial)
tbl_cont <- tbl_regression(modelo_cont, exponentiate = TRUE)
tbl_cont
# Indice
modelo_iis <- glm(controlado ~ grupo_iis, data = df_modelos, family = binomial)
tbl_iis <- tbl_regression(modelo_iis, exponentiate = TRUE)
tbl_iis
lc3$predclass
datos$Clase_Latente <- lc3$predclass
datos_2$Clase_Latente <- lc3$predclass
datos$Clase_Latente <- as.numeric(datos$Clase_Latente)
datos$Clase_Latente <- as.factor(datos$Clase_Latente)
datos_2$Clase_Latente <- as.numeric(datos_2$Clase_Latente)
datos_2$Clase_Latente <- as.factor(datos_2$Clase_Latente)
# Lista de variables a transformar
vars <- c("diabetes", "hta", "erc", "epoc", "scc", "ecv", "dislip", "icc", "obesidad", "osteoporosis", "fibri_auricular", "hipotir", "hipertir", "osteoartritis", "artritis_reumatoide", "les", "asma", "eap", "saos", "gota")
# Aplicar transformación
datos <- datos %>%
mutate(across(all_of(vars), ~ factor(.x, labels = c("No", "Si"))))
table1(~ factor(diabetes) + factor(hta) + factor(erc) + factor(epoc) + factor(scc) + factor(ecv) + factor(dislip) + factor(icc) + factor(obesidad) + factor(osteoporosis) + factor(fibri_auricular) + factor(hipotir) + factor(hipertir) + factor(osteoartritis) + factor(artritis_reumatoide) + factor(les) + factor(asma) + factor(eap) + factor(saos) + factor(gota) | Clase_Latente, data=datos)
library(gtsummary); library(dplyr); library(tidyr)
df_modelos <- datos_2[, c("edad", "sexo", "adherente_total", "Clase_Latente", "grupo_enfermedades", "grupo_iis", "controlado",
"fragilidad", "marcha_alterada", "apoyo_alterado")]
df_modelos$sexo <- as.factor(df_modelos$sexo)
df_modelos$sexo <- factor(df_modelos$sexo, labels = c("Hombre", "Mujer"))
#Univariados control
# Perfil
modelo_per <- glm(controlado ~ Clase_Latente, data = df_modelos, family = binomial)
tbl_per <- tbl_regression(modelo_per, exponentiate = TRUE)
tbl_per
# Conteo
modelo_cont <- glm(controlado ~ grupo_enfermedades, data = df_modelos, family = binomial)
tbl_cont <- tbl_regression(modelo_cont, exponentiate = TRUE)
tbl_cont
# Indice
modelo_iis <- glm(controlado ~ grupo_iis, data = df_modelos, family = binomial)
tbl_iis <- tbl_regression(modelo_iis, exponentiate = TRUE)
tbl_iis
#Multivariable control
# Perfil
modelo_per_m <- glm(controlado ~ Clase_Latente + edad + sexo + adherente_total, data = df_modelos, family = binomial)
tbl_per_m <- tbl_regression(modelo_per_m, exponentiate = TRUE)
tbl_per_m
# Conteo
modelo_cont_m <- glm(controlado ~ grupo_enfermedades + edad + sexo + adherente_total, data = df_modelos, family = binomial)
tbl_cont_m <- tbl_regression(modelo_cont_m, exponentiate = TRUE)
tbl_cont_m
# Indice
modelo_iis_m <- glm(controlado ~ grupo_iis + edad + sexo + adherente_total, data = df_modelos, family = binomial)
tbl_iis_m <- tbl_regression(modelo_iis_m, exponentiate = TRUE)
tbl_iis_m
library(ggplot2)
library(dplyr)
library(rms) # para val.prob y calibración
library(ResourceSelection)  # para prueba de Hosmer-Lemeshow
#Perfiles
df_modelos$prob_predicha_per_m <- predict(modelo_per_m, type = "response")
# Curva de calibración
val.prob(df_modelos$prob_predicha_per_m, df_modelos$controlado, m = 10, xlab="Probabilidad predicha", ylab="Observaciones", cex = 0.8, statloc = FALSE)
hoslem.test(df_modelos$controlado, df_modelos$prob_predicha_per_m, g = 10)
#Conteo
df_modelos$prob_predicha_cont_m <- predict(modelo_cont_m, type = "response")
# Curva de calibración
val.prob(df_modelos$prob_predicha_cont_m, df_modelos$controlado, m = 10, xlab="Probabilidad predicha", ylab="Observaciones", cex = 0.8, statloc = FALSE)
hoslem.test(df_modelos$controlado, df_modelos$prob_predicha_cont_m, g = 10)
#índice
df_modelos$prob_predicha_iis_m <- predict(modelo_iis_m, type = "response")
# Curva de calibración
val.prob(df_modelos$prob_predicha_iis_m, df_modelos$controlado, m = 10, xlab="Probabilidad predicha", ylab="Observaciones", cex = 0.8, statloc = FALSE)
hoslem.test(df_modelos$controlado, df_modelos$prob_predicha_iis_m, g = 10)
library(rcompanion)
nagelkerke(modelo_per_m)
nagelkerke(modelo_cont_m)
nagelkerke(modelo_iis_m)
library(pROC)
# Curva 1
roc_per_m <- roc(df_modelos$controlado, modelo_per_m$fitted.values)
ci.auc(roc_per_m)
plot(roc_per_m,
legacy.axes = TRUE,
percent = TRUE,
ylab = "Sensibilidad",
xlab = "1 - Especificidad",
col = "darkblue", lwd = 2, grid = TRUE)
# Curva 2 (añadida a la misma gráfica)
roc_cont_m <- roc(df_modelos$controlado, modelo_cont_m$fitted.values)
ci.auc(roc_cont_m)
plot(roc_cont_m, add = TRUE, col = "darkred", lwd = 2)
# Curva 3 (añadida a la misma gráfica)
roc_iis_m <- roc(df_modelos$controlado, modelo_iis_m$fitted.values)
ci.auc(roc_iis_m)
plot(roc_iis_m, add = TRUE, col = "darkgreen", lwd = 2)
# Agregar leyenda
legend("bottomright",
legend = c(
paste0("Modelo Perfiles (AUC = ", format(auc(roc_per_m), digits = 3), "%)"),
paste0("Modelo Conteo (AUC = ", format(auc(roc_cont_m), digits = 3), "%)"),
paste0("Modelo Índice (AUC = ", format(auc(roc_iis_m), digits = 3), "%)")
),
col = c("darkblue", "darkred", "darkgreen"),
lwd = 2)
install.packages("CalibrationCurves")
calPerf_con = val.prob.ci.2(df_modelos$prob_predicha_per_m, df_modelos$controlado)
library(CalibrationCurves)
install.packages("bookdown")
library(CalibrationCurves)
install.packages("bookdown")
library(CalibrationCurves)
# Curva de calibración
calPerf_m <- val.prob(df_modelos$prob_predicha_per_m, df_modelos$controlado, m = 10, xlab="Probabilidad predicha", ylab="Observaciones", cex = 0.8, statloc = FALSE)
str(calPerf_m)
calPerf_m
install.packages("bookdown")
install.packages("xfun")
install.packages("bookdown")
calPerf_m <- val.prob(df_modelos$prob_predicha_per_m, df_modelos$controlado, m = 10, xlab="Probabilidad predicha", ylab="Observaciones", cex = 0.8, statloc = FALSE)
install.packages("pak")
calPerf_m <- val.prob(df_modelos$prob_predicha_per_m, df_modelos$controlado, m = 10, xlab="Probabilidad predicha", ylab="Observaciones", cex = 0.8, statloc = FALSE)
pak::pkg_install("bookdown")
pak::pkg_install("bookdown")
pkgbuild::check_build_tools(debug = TRUE)
